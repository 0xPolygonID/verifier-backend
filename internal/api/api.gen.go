// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"

	"github.com/go-chi/chi/v5"
	uuid "github.com/google/uuid"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// CallbackResponse defines model for CallbackResponse.
type CallbackResponse = map[string]interface{}

// GenericErrorMessage defines model for GenericErrorMessage.
type GenericErrorMessage struct {
	Message string `json:"message"`
}

// Health defines model for Health.
type Health = map[string]interface{}

// OnChain defines model for OnChain.
type OnChain struct {
	ChainID         int     `json:"chainID"`
	ContractAddress string  `json:"contractAddress"`
	MethodID        *string `json:"methodID,omitempty"`
	Network         string  `json:"network"`
}

// QRCode defines model for QRCode.
type QRCode struct {
	Body struct {
		CallbackUrl *string  `json:"callbackUrl,omitempty"`
		Reason      *string  `json:"reason,omitempty"`
		Scope       *[]Scope `json:"scope,omitempty"`
	} `json:"body"`
	From string  `json:"from"`
	Id   string  `json:"id"`
	Thid string  `json:"thid"`
	To   *string `json:"to,omitempty"`
	Typ  string  `json:"typ"`
	Type string  `json:"type"`
}

// QRStoreRequest defines model for QRStoreRequest.
type QRStoreRequest = QRCode

// QRStoreResponse defines model for QRStoreResponse.
type QRStoreResponse = string

// Scope defines model for Scope.
type Scope struct {
	CircuitId string                 `json:"circuitId"`
	Id        int                    `json:"id"`
	Query     map[string]interface{} `json:"query"`
}

// SignInRequest defines model for SignInRequest.
type SignInRequest struct {
	CircuitID string                 `json:"circuitID"`
	Network   string                 `json:"network"`
	OnChain   *OnChain               `json:"onChain,omitempty"`
	Query     map[string]interface{} `json:"query"`
	To        *string                `json:"to,omitempty"`
}

// SingInResponse defines model for SingInResponse.
type SingInResponse struct {
	QrCode    QRCode `json:"qrCode"`
	SessionID int    `json:"sessionID"`
}

// StatusResponse defines model for StatusResponse.
type StatusResponse = map[string]interface{}

// Id defines model for id.
type Id = uuid.UUID

// SessionID defines model for sessionID.
type SessionID = string

// N400 defines model for 400.
type N400 = GenericErrorMessage

// N404 defines model for 404.
type N404 = GenericErrorMessage

// N500 defines model for 500.
type N500 = GenericErrorMessage

// CallbackTextBody defines parameters for Callback.
type CallbackTextBody = string

// CallbackParams defines parameters for Callback.
type CallbackParams struct {
	// SessionID Session ID e.g: 123456
	SessionID SessionID `form:"sessionID" json:"sessionID"`
}

// GetQRCodeFromStoreParams defines parameters for GetQRCodeFromStore.
type GetQRCodeFromStoreParams struct {
	// Id ID e.g: 89d298fa-15a6-4a1d-ab13-d1069467eedd
	Id Id `form:"id" json:"id"`
}

// StatusParams defines parameters for Status.
type StatusParams struct {
	// SessionID Session ID e.g: 123456
	SessionID SessionID `form:"sessionID" json:"sessionID"`
}

// CallbackTextRequestBody defines body for Callback for text/plain ContentType.
type CallbackTextRequestBody = CallbackTextBody

// QRStoreJSONRequestBody defines body for QRStore for application/json ContentType.
type QRStoreJSONRequestBody = QRStoreRequest

// SignInJSONRequestBody defines body for SignIn for application/json ContentType.
type SignInJSONRequestBody = SignInRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the documentation
	// (GET /)
	GetDocumentation(w http.ResponseWriter, r *http.Request)
	// Callback
	// (POST /callback)
	Callback(w http.ResponseWriter, r *http.Request, params CallbackParams)
	// Health Check
	// (GET /health)
	Health(w http.ResponseWriter, r *http.Request)
	// Get QRCode from store
	// (GET /qr-store)
	GetQRCodeFromStore(w http.ResponseWriter, r *http.Request, params GetQRCodeFromStoreParams)
	// Store QRCode
	// (POST /qr-store)
	QRStore(w http.ResponseWriter, r *http.Request)
	// Sing in
	// (GET /sign-in)
	SignIn(w http.ResponseWriter, r *http.Request)
	// Get Status
	// (GET /status)
	Status(w http.ResponseWriter, r *http.Request, params StatusParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get the documentation
// (GET /)
func (_ Unimplemented) GetDocumentation(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Callback
// (POST /callback)
func (_ Unimplemented) Callback(w http.ResponseWriter, r *http.Request, params CallbackParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Health Check
// (GET /health)
func (_ Unimplemented) Health(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get QRCode from store
// (GET /qr-store)
func (_ Unimplemented) GetQRCodeFromStore(w http.ResponseWriter, r *http.Request, params GetQRCodeFromStoreParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Store QRCode
// (POST /qr-store)
func (_ Unimplemented) QRStore(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Sing in
// (GET /sign-in)
func (_ Unimplemented) SignIn(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Status
// (GET /status)
func (_ Unimplemented) Status(w http.ResponseWriter, r *http.Request, params StatusParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetDocumentation operation middleware
func (siw *ServerInterfaceWrapper) GetDocumentation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDocumentation(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Callback operation middleware
func (siw *ServerInterfaceWrapper) Callback(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CallbackParams

	// ------------- Required query parameter "sessionID" -------------

	if paramValue := r.URL.Query().Get("sessionID"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "sessionID"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "sessionID", r.URL.Query(), &params.SessionID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sessionID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Callback(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Health operation middleware
func (siw *ServerInterfaceWrapper) Health(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Health(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetQRCodeFromStore operation middleware
func (siw *ServerInterfaceWrapper) GetQRCodeFromStore(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetQRCodeFromStoreParams

	// ------------- Required query parameter "id" -------------

	if paramValue := r.URL.Query().Get("id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetQRCodeFromStore(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// QRStore operation middleware
func (siw *ServerInterfaceWrapper) QRStore(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QRStore(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SignIn operation middleware
func (siw *ServerInterfaceWrapper) SignIn(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SignIn(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Status operation middleware
func (siw *ServerInterfaceWrapper) Status(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params StatusParams

	// ------------- Required query parameter "sessionID" -------------

	if paramValue := r.URL.Query().Get("sessionID"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "sessionID"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "sessionID", r.URL.Query(), &params.SessionID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sessionID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Status(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/", wrapper.GetDocumentation)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/callback", wrapper.Callback)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/health", wrapper.Health)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/qr-store", wrapper.GetQRCodeFromStore)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/qr-store", wrapper.QRStore)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/sign-in", wrapper.SignIn)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/status", wrapper.Status)
	})

	return r
}

type N400JSONResponse GenericErrorMessage

type N404JSONResponse GenericErrorMessage

type N500JSONResponse GenericErrorMessage

type GetDocumentationRequestObject struct {
}

type GetDocumentationResponseObject interface {
	VisitGetDocumentationResponse(w http.ResponseWriter) error
}

type GetDocumentation200Response struct {
}

func (response GetDocumentation200Response) VisitGetDocumentationResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type CallbackRequestObject struct {
	Params CallbackParams
	Body   *CallbackTextRequestBody
}

type CallbackResponseObject interface {
	VisitCallbackResponse(w http.ResponseWriter) error
}

type Callback200JSONResponse CallbackResponse

func (response Callback200JSONResponse) VisitCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Callback404JSONResponse struct{ N404JSONResponse }

func (response Callback404JSONResponse) VisitCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type Callback500JSONResponse struct{ N500JSONResponse }

func (response Callback500JSONResponse) VisitCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type HealthRequestObject struct {
}

type HealthResponseObject interface {
	VisitHealthResponse(w http.ResponseWriter) error
}

type Health200JSONResponse Health

func (response Health200JSONResponse) VisitHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Health500JSONResponse struct{ N500JSONResponse }

func (response Health500JSONResponse) VisitHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetQRCodeFromStoreRequestObject struct {
	Params GetQRCodeFromStoreParams
}

type GetQRCodeFromStoreResponseObject interface {
	VisitGetQRCodeFromStoreResponse(w http.ResponseWriter) error
}

type GetQRCodeFromStore200JSONResponse QRCode

func (response GetQRCodeFromStore200JSONResponse) VisitGetQRCodeFromStoreResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetQRCodeFromStore404JSONResponse struct{ N404JSONResponse }

func (response GetQRCodeFromStore404JSONResponse) VisitGetQRCodeFromStoreResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetQRCodeFromStore500JSONResponse struct{ N500JSONResponse }

func (response GetQRCodeFromStore500JSONResponse) VisitGetQRCodeFromStoreResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type QRStoreRequestObject struct {
	Body *QRStoreJSONRequestBody
}

type QRStoreResponseObject interface {
	VisitQRStoreResponse(w http.ResponseWriter) error
}

type QRStore200JSONResponse QRStoreResponse

func (response QRStore200JSONResponse) VisitQRStoreResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type QRStore500JSONResponse struct{ N500JSONResponse }

func (response QRStore500JSONResponse) VisitQRStoreResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type SignInRequestObject struct {
	Body *SignInJSONRequestBody
}

type SignInResponseObject interface {
	VisitSignInResponse(w http.ResponseWriter) error
}

type SignIn200JSONResponse SingInResponse

func (response SignIn200JSONResponse) VisitSignInResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SignIn400JSONResponse struct{ N400JSONResponse }

func (response SignIn400JSONResponse) VisitSignInResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SignIn500JSONResponse struct{ N500JSONResponse }

func (response SignIn500JSONResponse) VisitSignInResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type StatusRequestObject struct {
	Params StatusParams
}

type StatusResponseObject interface {
	VisitStatusResponse(w http.ResponseWriter) error
}

type Status200JSONResponse StatusResponse

func (response Status200JSONResponse) VisitStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Status404JSONResponse struct{ N404JSONResponse }

func (response Status404JSONResponse) VisitStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type Status500JSONResponse struct{ N500JSONResponse }

func (response Status500JSONResponse) VisitStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get the documentation
	// (GET /)
	GetDocumentation(ctx context.Context, request GetDocumentationRequestObject) (GetDocumentationResponseObject, error)
	// Callback
	// (POST /callback)
	Callback(ctx context.Context, request CallbackRequestObject) (CallbackResponseObject, error)
	// Health Check
	// (GET /health)
	Health(ctx context.Context, request HealthRequestObject) (HealthResponseObject, error)
	// Get QRCode from store
	// (GET /qr-store)
	GetQRCodeFromStore(ctx context.Context, request GetQRCodeFromStoreRequestObject) (GetQRCodeFromStoreResponseObject, error)
	// Store QRCode
	// (POST /qr-store)
	QRStore(ctx context.Context, request QRStoreRequestObject) (QRStoreResponseObject, error)
	// Sing in
	// (GET /sign-in)
	SignIn(ctx context.Context, request SignInRequestObject) (SignInResponseObject, error)
	// Get Status
	// (GET /status)
	Status(ctx context.Context, request StatusRequestObject) (StatusResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHttpHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetDocumentation operation middleware
func (sh *strictHandler) GetDocumentation(w http.ResponseWriter, r *http.Request) {
	var request GetDocumentationRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDocumentation(ctx, request.(GetDocumentationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDocumentation")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDocumentationResponseObject); ok {
		if err := validResponse.VisitGetDocumentationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Callback operation middleware
func (sh *strictHandler) Callback(w http.ResponseWriter, r *http.Request, params CallbackParams) {
	var request CallbackRequestObject

	request.Params = params

	data, err := io.ReadAll(r.Body)
	if err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't read body: %w", err))
		return
	}
	body := CallbackTextRequestBody(data)
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Callback(ctx, request.(CallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Callback")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CallbackResponseObject); ok {
		if err := validResponse.VisitCallbackResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Health operation middleware
func (sh *strictHandler) Health(w http.ResponseWriter, r *http.Request) {
	var request HealthRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Health(ctx, request.(HealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Health")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(HealthResponseObject); ok {
		if err := validResponse.VisitHealthResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetQRCodeFromStore operation middleware
func (sh *strictHandler) GetQRCodeFromStore(w http.ResponseWriter, r *http.Request, params GetQRCodeFromStoreParams) {
	var request GetQRCodeFromStoreRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetQRCodeFromStore(ctx, request.(GetQRCodeFromStoreRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetQRCodeFromStore")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetQRCodeFromStoreResponseObject); ok {
		if err := validResponse.VisitGetQRCodeFromStoreResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// QRStore operation middleware
func (sh *strictHandler) QRStore(w http.ResponseWriter, r *http.Request) {
	var request QRStoreRequestObject

	var body QRStoreJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.QRStore(ctx, request.(QRStoreRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QRStore")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(QRStoreResponseObject); ok {
		if err := validResponse.VisitQRStoreResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SignIn operation middleware
func (sh *strictHandler) SignIn(w http.ResponseWriter, r *http.Request) {
	var request SignInRequestObject

	var body SignInJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SignIn(ctx, request.(SignInRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SignIn")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SignInResponseObject); ok {
		if err := validResponse.VisitSignInResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Status operation middleware
func (sh *strictHandler) Status(w http.ResponseWriter, r *http.Request, params StatusParams) {
	var request StatusRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Status(ctx, request.(StatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Status")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(StatusResponseObject); ok {
		if err := validResponse.VisitStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
